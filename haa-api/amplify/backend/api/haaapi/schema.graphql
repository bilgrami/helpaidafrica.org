enum ApiHealthStatus {
  UP
  DOWN
}

enum PhoneType {
  WORK
  CELL
  HOME
  OTHER
}

enum ShippingStatus {
  NEW
  DEPARTED_FROM_SHIPPING_HUB
  IN_PROGRESS
  ARRIVED_AT_SHIPPING_HUB
  COMPLETED
  CANCELLED
  ERROR
}

enum BoxStatus {
  NEW
  PACKAGED
  PICKUP_IN_TRANSIT
  PICKUP_COMPLETED
  READY_TO_SHIP
  IN_TRANSIT
  DELIVERED
  FAILED_TO_DELIVER
  CANCELLED
  REJECTED
  DAMAGED
  PARTIALLY_DAMAGED
  LOST
  DUPLICATE
  DIVERTED
  ERROR
}

enum UserStatus {
  PENDING_VERIFICATION
  ACTIVE
  DISABLED
  FLAGGED
}

type Image 
@model
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) 
{
  id: ID!
  altTex: String
  src: AWSURL!
}

type ApihealthCheckInfo
@model
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  status: ApiHealthStatus!
  isActive: Boolean!
  proceed: Boolean!
  message: String
  lastUpdated: AWSDateTime
}

type Address
@model
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  label: String!
  addressLine1: String!
  addressLine2: String
  city: String!
  state: String
  province: String
  zipCode: String
  postalCode: String
  country: String!
}

type Phone
@model
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  phone: AWSPhone
  isActive: Boolean
  type: PhoneType
}

type Org
@model
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  name: String!
  description: String
  addressID: ID!
  address: Address @connection(fields: ["addressID"])
  email: AWSEmail
  primaryPhone: Phone
  otherPhones: [Phone!]
  primaryDomain: String
  privacyPolicy: String
  tags: [String!]
  images: [Image!]
  notes: String
  isActive: Boolean!
  boxes: [Box] @connection(keyName: "byOrg", fields: ["id"])
  users: [User] @connection(keyName: "byOrg", fields: ["id"])
}

type LocationInfo
@model
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  locationLabel: String!
  latitude: String!
  longitude: String!
  isActive: Boolean!

  addressID: ID!
  address: Address @connection(fields: ["addressID"])

  phones: [Phone]
  plusCode: String
  website: [AWSURL!]
  notes: String
  notesHistory: [String!]
  tags: [String!]
}

type Shipment
@model
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  name: String!
  description: String
  isActive: Boolean!
  startDate: AWSDateTime
  deliveryDate: AWSDateTime
  startLocationID: ID!
  startLocation: LocationInfo @connection(fields: ["startLocationID"])
  destinationLocationID: ID!
  destinationLocation: LocationInfo
  @connection(fields: ["destinationLocationID"])
  shipmentNotes: String
  deliveryNotes: String
  trackingId: String
  weight: String
  shipmentReceiver: String
  status: ShippingStatus
  statusHistory: [String!]
  tags: [String!]
  images: [Image!]
  notes: String
  notesHistory: [String!]
  boxes: [Box] @connection(keyName: "byBoxShipment", fields: ["id"])
}

type Box
@model
@key(name: "byOrg", fields: ["orgID"])
@key(
  name: "byBoxShipment"
  fields: ["shipmentID", "id"]
  queryField: "shipmentsByBoxId"
)
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  title: String!
  contents: String!
  size: String!
  orgID: ID!
  org: Org @connection(fields: ["orgID"])
  shipmentID: ID!
  shipment: Shipment @connection(fields: ["shipmentID"])
  isActive: Boolean!
  barCode: String
  qrCode: String
  barCodePhoto: AWSURL
  qrCodePhoto: AWSURL
  tags: [String!]
  images: [Image!]
  status: BoxStatus!
  statusHistory: [BoxStatus!]
  internalNotes: String
  notes: String
  notesHistory: [String!]
  locations: [BoxLocation]
  @connection(keyName: "locationForBox", fields: ["id"])
}

type BoxLocation
@model
@key(name: "locationForBox", fields: ["boxID", "locationInfoID"])
@key(name: "userForBox", fields: ["userID", "boxID"])
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  boxID: ID!
  box: Box! @connection(fields: ["boxID"])

  locationInfoID: ID!
  locationInfo: LocationInfo! @connection(fields: ["locationInfoID"])

  userID: ID!
  user: User! @connection(fields: ["userID"])

  notes: String
  isFinal: Boolean!
  tags: [String!]
  images: [Image!]
  isActive: Boolean!
}

type User
@model
@key(name: "byOrg", fields: ["orgID"])
@auth(
  rules: [
   { allow: owner },
   { allow: public, provider: apiKey }, 
   { allow: groups, groups: ["haaApiAdmins", "haaApiDataAdmins"] },
   { allow: private, operations: [read]}
  ]
) {
  id: ID!
  name: String!
  orgID: ID!
  org: Org @connection(fields: ["orgID"])
  isActive: Boolean!
  tags: [String!]
  images: [Image!]
  status: UserStatus!
  statusHistory: [UserStatus!]
  internalNotes: String
  notes: String
  rank: Float
  notesHistory: [String!]
  boxLocations: [BoxLocation]  @connection(keyName: "userForBox", fields: ["id"])
}
