# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.audit_info import AuditInfo  # noqa: F401,E501
from swagger_server.models.box import Box  # noqa: F401,E501
from swagger_server.models.box_status import BoxStatus  # noqa: F401,E501
from swagger_server.models.location import Location  # noqa: F401,E501
from swagger_server.models.user import User  # noqa: F401,E501
from swagger_server import util


class BoxTrackingInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, box: Box=None, _date: datetime=None, photo_urls: List[str]=None, user_id: User=None, status: BoxStatus=None, location: Location=None, complete: bool=False, audit_info: AuditInfo=None):  # noqa: E501
        """BoxTrackingInfo - a model defined in Swagger

        :param id: The id of this BoxTrackingInfo.  # noqa: E501
        :type id: int
        :param box: The box of this BoxTrackingInfo.  # noqa: E501
        :type box: Box
        :param _date: The _date of this BoxTrackingInfo.  # noqa: E501
        :type _date: datetime
        :param photo_urls: The photo_urls of this BoxTrackingInfo.  # noqa: E501
        :type photo_urls: List[str]
        :param user_id: The user_id of this BoxTrackingInfo.  # noqa: E501
        :type user_id: User
        :param status: The status of this BoxTrackingInfo.  # noqa: E501
        :type status: BoxStatus
        :param location: The location of this BoxTrackingInfo.  # noqa: E501
        :type location: Location
        :param complete: The complete of this BoxTrackingInfo.  # noqa: E501
        :type complete: bool
        :param audit_info: The audit_info of this BoxTrackingInfo.  # noqa: E501
        :type audit_info: AuditInfo
        """
        self.swagger_types = {
            'id': int,
            'box': Box,
            '_date': datetime,
            'photo_urls': List[str],
            'user_id': User,
            'status': BoxStatus,
            'location': Location,
            'complete': bool,
            'audit_info': AuditInfo
        }

        self.attribute_map = {
            'id': 'id',
            'box': 'box',
            '_date': 'date',
            'photo_urls': 'photoUrls',
            'user_id': 'userId',
            'status': 'status',
            'location': 'location',
            'complete': 'complete',
            'audit_info': 'auditInfo'
        }
        self._id = id
        self._box = box
        self.__date = _date
        self._photo_urls = photo_urls
        self._user_id = user_id
        self._status = status
        self._location = location
        self._complete = complete
        self._audit_info = audit_info

    @classmethod
    def from_dict(cls, dikt) -> 'BoxTrackingInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BoxTrackingInfo of this BoxTrackingInfo.  # noqa: E501
        :rtype: BoxTrackingInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this BoxTrackingInfo.


        :return: The id of this BoxTrackingInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this BoxTrackingInfo.


        :param id: The id of this BoxTrackingInfo.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def box(self) -> Box:
        """Gets the box of this BoxTrackingInfo.


        :return: The box of this BoxTrackingInfo.
        :rtype: Box
        """
        return self._box

    @box.setter
    def box(self, box: Box):
        """Sets the box of this BoxTrackingInfo.


        :param box: The box of this BoxTrackingInfo.
        :type box: Box
        """
        if box is None:
            raise ValueError("Invalid value for `box`, must not be `None`")  # noqa: E501

        self._box = box

    @property
    def _date(self) -> datetime:
        """Gets the _date of this BoxTrackingInfo.


        :return: The _date of this BoxTrackingInfo.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date: datetime):
        """Sets the _date of this BoxTrackingInfo.


        :param _date: The _date of this BoxTrackingInfo.
        :type _date: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def photo_urls(self) -> List[str]:
        """Gets the photo_urls of this BoxTrackingInfo.


        :return: The photo_urls of this BoxTrackingInfo.
        :rtype: List[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls: List[str]):
        """Sets the photo_urls of this BoxTrackingInfo.


        :param photo_urls: The photo_urls of this BoxTrackingInfo.
        :type photo_urls: List[str]
        """

        self._photo_urls = photo_urls

    @property
    def user_id(self) -> User:
        """Gets the user_id of this BoxTrackingInfo.


        :return: The user_id of this BoxTrackingInfo.
        :rtype: User
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: User):
        """Sets the user_id of this BoxTrackingInfo.


        :param user_id: The user_id of this BoxTrackingInfo.
        :type user_id: User
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def status(self) -> BoxStatus:
        """Gets the status of this BoxTrackingInfo.


        :return: The status of this BoxTrackingInfo.
        :rtype: BoxStatus
        """
        return self._status

    @status.setter
    def status(self, status: BoxStatus):
        """Sets the status of this BoxTrackingInfo.


        :param status: The status of this BoxTrackingInfo.
        :type status: BoxStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def location(self) -> Location:
        """Gets the location of this BoxTrackingInfo.


        :return: The location of this BoxTrackingInfo.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location: Location):
        """Sets the location of this BoxTrackingInfo.


        :param location: The location of this BoxTrackingInfo.
        :type location: Location
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def complete(self) -> bool:
        """Gets the complete of this BoxTrackingInfo.


        :return: The complete of this BoxTrackingInfo.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete: bool):
        """Sets the complete of this BoxTrackingInfo.


        :param complete: The complete of this BoxTrackingInfo.
        :type complete: bool
        """

        self._complete = complete

    @property
    def audit_info(self) -> AuditInfo:
        """Gets the audit_info of this BoxTrackingInfo.


        :return: The audit_info of this BoxTrackingInfo.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info: AuditInfo):
        """Sets the audit_info of this BoxTrackingInfo.


        :param audit_info: The audit_info of this BoxTrackingInfo.
        :type audit_info: AuditInfo
        """

        self._audit_info = audit_info
