# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.audit_info import AuditInfo  # noqa: F401,E501
from swagger_server.models.tag import Tag  # noqa: F401,E501
from swagger_server import util


class Org(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, org_id: int=None, name: str=None, description: str=None, contact_first_name: str=None, contact_last_name: str=None, address: str=None, city: str=None, state: str=None, province: str=None, country: str=None, email: str=None, phone: str=None, notes: str=None, photo_urls: List[str]=None, tags: List[Tag]=None, active: bool=True, audit_info: AuditInfo=None):  # noqa: E501
        """Org - a model defined in Swagger

        :param org_id: The org_id of this Org.  # noqa: E501
        :type org_id: int
        :param name: The name of this Org.  # noqa: E501
        :type name: str
        :param description: The description of this Org.  # noqa: E501
        :type description: str
        :param contact_first_name: The contact_first_name of this Org.  # noqa: E501
        :type contact_first_name: str
        :param contact_last_name: The contact_last_name of this Org.  # noqa: E501
        :type contact_last_name: str
        :param address: The address of this Org.  # noqa: E501
        :type address: str
        :param city: The city of this Org.  # noqa: E501
        :type city: str
        :param state: The state of this Org.  # noqa: E501
        :type state: str
        :param province: The province of this Org.  # noqa: E501
        :type province: str
        :param country: The country of this Org.  # noqa: E501
        :type country: str
        :param email: The email of this Org.  # noqa: E501
        :type email: str
        :param phone: The phone of this Org.  # noqa: E501
        :type phone: str
        :param notes: The notes of this Org.  # noqa: E501
        :type notes: str
        :param photo_urls: The photo_urls of this Org.  # noqa: E501
        :type photo_urls: List[str]
        :param tags: The tags of this Org.  # noqa: E501
        :type tags: List[Tag]
        :param active: The active of this Org.  # noqa: E501
        :type active: bool
        :param audit_info: The audit_info of this Org.  # noqa: E501
        :type audit_info: AuditInfo
        """
        self.swagger_types = {
            'org_id': int,
            'name': str,
            'description': str,
            'contact_first_name': str,
            'contact_last_name': str,
            'address': str,
            'city': str,
            'state': str,
            'province': str,
            'country': str,
            'email': str,
            'phone': str,
            'notes': str,
            'photo_urls': List[str],
            'tags': List[Tag],
            'active': bool,
            'audit_info': AuditInfo
        }

        self.attribute_map = {
            'org_id': 'orgId',
            'name': 'name',
            'description': 'description',
            'contact_first_name': 'contactFirstName',
            'contact_last_name': 'contactLastName',
            'address': 'address',
            'city': 'city',
            'state': 'state',
            'province': 'province',
            'country': 'country',
            'email': 'email',
            'phone': 'phone',
            'notes': 'notes',
            'photo_urls': 'photoUrls',
            'tags': 'tags',
            'active': 'active',
            'audit_info': 'auditInfo'
        }
        self._org_id = org_id
        self._name = name
        self._description = description
        self._contact_first_name = contact_first_name
        self._contact_last_name = contact_last_name
        self._address = address
        self._city = city
        self._state = state
        self._province = province
        self._country = country
        self._email = email
        self._phone = phone
        self._notes = notes
        self._photo_urls = photo_urls
        self._tags = tags
        self._active = active
        self._audit_info = audit_info

    @classmethod
    def from_dict(cls, dikt) -> 'Org':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Org of this Org.  # noqa: E501
        :rtype: Org
        """
        return util.deserialize_model(dikt, cls)

    @property
    def org_id(self) -> int:
        """Gets the org_id of this Org.


        :return: The org_id of this Org.
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: int):
        """Sets the org_id of this Org.


        :param org_id: The org_id of this Org.
        :type org_id: int
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def name(self) -> str:
        """Gets the name of this Org.


        :return: The name of this Org.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Org.


        :param name: The name of this Org.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this Org.


        :return: The description of this Org.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Org.


        :param description: The description of this Org.
        :type description: str
        """

        self._description = description

    @property
    def contact_first_name(self) -> str:
        """Gets the contact_first_name of this Org.


        :return: The contact_first_name of this Org.
        :rtype: str
        """
        return self._contact_first_name

    @contact_first_name.setter
    def contact_first_name(self, contact_first_name: str):
        """Sets the contact_first_name of this Org.


        :param contact_first_name: The contact_first_name of this Org.
        :type contact_first_name: str
        """

        self._contact_first_name = contact_first_name

    @property
    def contact_last_name(self) -> str:
        """Gets the contact_last_name of this Org.


        :return: The contact_last_name of this Org.
        :rtype: str
        """
        return self._contact_last_name

    @contact_last_name.setter
    def contact_last_name(self, contact_last_name: str):
        """Sets the contact_last_name of this Org.


        :param contact_last_name: The contact_last_name of this Org.
        :type contact_last_name: str
        """

        self._contact_last_name = contact_last_name

    @property
    def address(self) -> str:
        """Gets the address of this Org.


        :return: The address of this Org.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Org.


        :param address: The address of this Org.
        :type address: str
        """

        self._address = address

    @property
    def city(self) -> str:
        """Gets the city of this Org.


        :return: The city of this Org.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this Org.


        :param city: The city of this Org.
        :type city: str
        """

        self._city = city

    @property
    def state(self) -> str:
        """Gets the state of this Org.


        :return: The state of this Org.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Org.


        :param state: The state of this Org.
        :type state: str
        """

        self._state = state

    @property
    def province(self) -> str:
        """Gets the province of this Org.


        :return: The province of this Org.
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province: str):
        """Sets the province of this Org.


        :param province: The province of this Org.
        :type province: str
        """

        self._province = province

    @property
    def country(self) -> str:
        """Gets the country of this Org.


        :return: The country of this Org.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Org.


        :param country: The country of this Org.
        :type country: str
        """

        self._country = country

    @property
    def email(self) -> str:
        """Gets the email of this Org.


        :return: The email of this Org.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Org.


        :param email: The email of this Org.
        :type email: str
        """

        self._email = email

    @property
    def phone(self) -> str:
        """Gets the phone of this Org.


        :return: The phone of this Org.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone: str):
        """Sets the phone of this Org.


        :param phone: The phone of this Org.
        :type phone: str
        """

        self._phone = phone

    @property
    def notes(self) -> str:
        """Gets the notes of this Org.


        :return: The notes of this Org.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Org.


        :param notes: The notes of this Org.
        :type notes: str
        """

        self._notes = notes

    @property
    def photo_urls(self) -> List[str]:
        """Gets the photo_urls of this Org.


        :return: The photo_urls of this Org.
        :rtype: List[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls: List[str]):
        """Sets the photo_urls of this Org.


        :param photo_urls: The photo_urls of this Org.
        :type photo_urls: List[str]
        """

        self._photo_urls = photo_urls

    @property
    def tags(self) -> List[Tag]:
        """Gets the tags of this Org.


        :return: The tags of this Org.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """Sets the tags of this Org.


        :param tags: The tags of this Org.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def active(self) -> bool:
        """Gets the active of this Org.


        :return: The active of this Org.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Org.


        :param active: The active of this Org.
        :type active: bool
        """

        self._active = active

    @property
    def audit_info(self) -> AuditInfo:
        """Gets the audit_info of this Org.


        :return: The audit_info of this Org.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info: AuditInfo):
        """Sets the audit_info of this Org.


        :param audit_info: The audit_info of this Org.
        :type audit_info: AuditInfo
        """

        self._audit_info = audit_info
