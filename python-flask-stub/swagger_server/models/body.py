# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, status: str=None, notes: str=None, user_id: str=None, location: str=None, tags: List[str]=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param status: The status of this Body.  # noqa: E501
        :type status: str
        :param notes: The notes of this Body.  # noqa: E501
        :type notes: str
        :param user_id: The user_id of this Body.  # noqa: E501
        :type user_id: str
        :param location: The location of this Body.  # noqa: E501
        :type location: str
        :param tags: The tags of this Body.  # noqa: E501
        :type tags: List[str]
        """
        self.swagger_types = {
            'status': str,
            'notes': str,
            'user_id': str,
            'location': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'status': 'status',
            'notes': 'notes',
            'user_id': 'userId',
            'location': 'location',
            'tags': 'tags'
        }
        self._status = status
        self._notes = notes
        self._user_id = user_id
        self._location = location
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this Body.

        Updated status of the box  # noqa: E501

        :return: The status of this Body.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Body.

        Updated status of the box  # noqa: E501

        :param status: The status of this Body.
        :type status: str
        """

        self._status = status

    @property
    def notes(self) -> str:
        """Gets the notes of this Body.

        Updated notes about the box  # noqa: E501

        :return: The notes of this Body.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Body.

        Updated notes about the box  # noqa: E501

        :param notes: The notes of this Body.
        :type notes: str
        """

        self._notes = notes

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Body.

        Id of the user performing the operation  # noqa: E501

        :return: The user_id of this Body.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Body.

        Id of the user performing the operation  # noqa: E501

        :param user_id: The user_id of this Body.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def location(self) -> str:
        """Gets the location of this Body.

        latLong of the user  # noqa: E501

        :return: The location of this Body.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location: str):
        """Sets the location of this Body.

        latLong of the user  # noqa: E501

        :param location: The location of this Body.
        :type location: str
        """

        self._location = location

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Body.

        Tags to be updated  # noqa: E501

        :return: The tags of this Body.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Body.

        Tags to be updated  # noqa: E501

        :param tags: The tags of this Body.
        :type tags: List[str]
        """

        self._tags = tags
