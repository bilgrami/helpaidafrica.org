# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.audit_info import AuditInfo  # noqa: F401,E501
from swagger_server.models.box_status import BoxStatus  # noqa: F401,E501
from swagger_server.models.tag import Tag  # noqa: F401,E501
from swagger_server import util


class Box(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, shipment: str=None, org: str=None, size: str='20x20x20', barcode: str=None, barcode_image: str=None, qrcode: str=None, qrcode_image: str=None, notes: str=None, photo_urls: List[str]=None, tags: List[Tag]=None, status: BoxStatus=None, active: bool=True, audit_info: AuditInfo=None):  # noqa: E501
        """Box - a model defined in Swagger

        :param id: The id of this Box.  # noqa: E501
        :type id: str
        :param shipment: The shipment of this Box.  # noqa: E501
        :type shipment: str
        :param org: The org of this Box.  # noqa: E501
        :type org: str
        :param size: The size of this Box.  # noqa: E501
        :type size: str
        :param barcode: The barcode of this Box.  # noqa: E501
        :type barcode: str
        :param barcode_image: The barcode_image of this Box.  # noqa: E501
        :type barcode_image: str
        :param qrcode: The qrcode of this Box.  # noqa: E501
        :type qrcode: str
        :param qrcode_image: The qrcode_image of this Box.  # noqa: E501
        :type qrcode_image: str
        :param notes: The notes of this Box.  # noqa: E501
        :type notes: str
        :param photo_urls: The photo_urls of this Box.  # noqa: E501
        :type photo_urls: List[str]
        :param tags: The tags of this Box.  # noqa: E501
        :type tags: List[Tag]
        :param status: The status of this Box.  # noqa: E501
        :type status: BoxStatus
        :param active: The active of this Box.  # noqa: E501
        :type active: bool
        :param audit_info: The audit_info of this Box.  # noqa: E501
        :type audit_info: AuditInfo
        """
        self.swagger_types = {
            'id': str,
            'shipment': str,
            'org': str,
            'size': str,
            'barcode': str,
            'barcode_image': str,
            'qrcode': str,
            'qrcode_image': str,
            'notes': str,
            'photo_urls': List[str],
            'tags': List[Tag],
            'status': BoxStatus,
            'active': bool,
            'audit_info': AuditInfo
        }

        self.attribute_map = {
            'id': 'id',
            'shipment': 'shipment',
            'org': 'org',
            'size': 'size',
            'barcode': 'barcode',
            'barcode_image': 'barcodeImage',
            'qrcode': 'qrcode',
            'qrcode_image': 'qrcodeImage',
            'notes': 'notes',
            'photo_urls': 'photoUrls',
            'tags': 'tags',
            'status': 'status',
            'active': 'active',
            'audit_info': 'auditInfo'
        }
        self._id = id
        self._shipment = shipment
        self._org = org
        self._size = size
        self._barcode = barcode
        self._barcode_image = barcode_image
        self._qrcode = qrcode
        self._qrcode_image = qrcode_image
        self._notes = notes
        self._photo_urls = photo_urls
        self._tags = tags
        self._status = status
        self._active = active
        self._audit_info = audit_info

    @classmethod
    def from_dict(cls, dikt) -> 'Box':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Box of this Box.  # noqa: E501
        :rtype: Box
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Box.


        :return: The id of this Box.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Box.


        :param id: The id of this Box.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def shipment(self) -> str:
        """Gets the shipment of this Box.


        :return: The shipment of this Box.
        :rtype: str
        """
        return self._shipment

    @shipment.setter
    def shipment(self, shipment: str):
        """Sets the shipment of this Box.


        :param shipment: The shipment of this Box.
        :type shipment: str
        """

        self._shipment = shipment

    @property
    def org(self) -> str:
        """Gets the org of this Box.


        :return: The org of this Box.
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org: str):
        """Sets the org of this Box.


        :param org: The org of this Box.
        :type org: str
        """

        self._org = org

    @property
    def size(self) -> str:
        """Gets the size of this Box.


        :return: The size of this Box.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this Box.


        :param size: The size of this Box.
        :type size: str
        """
        allowed_values = ["20x20x20", "10x10x10"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def barcode(self) -> str:
        """Gets the barcode of this Box.


        :return: The barcode of this Box.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode: str):
        """Sets the barcode of this Box.


        :param barcode: The barcode of this Box.
        :type barcode: str
        """

        self._barcode = barcode

    @property
    def barcode_image(self) -> str:
        """Gets the barcode_image of this Box.


        :return: The barcode_image of this Box.
        :rtype: str
        """
        return self._barcode_image

    @barcode_image.setter
    def barcode_image(self, barcode_image: str):
        """Sets the barcode_image of this Box.


        :param barcode_image: The barcode_image of this Box.
        :type barcode_image: str
        """

        self._barcode_image = barcode_image

    @property
    def qrcode(self) -> str:
        """Gets the qrcode of this Box.


        :return: The qrcode of this Box.
        :rtype: str
        """
        return self._qrcode

    @qrcode.setter
    def qrcode(self, qrcode: str):
        """Sets the qrcode of this Box.


        :param qrcode: The qrcode of this Box.
        :type qrcode: str
        """

        self._qrcode = qrcode

    @property
    def qrcode_image(self) -> str:
        """Gets the qrcode_image of this Box.


        :return: The qrcode_image of this Box.
        :rtype: str
        """
        return self._qrcode_image

    @qrcode_image.setter
    def qrcode_image(self, qrcode_image: str):
        """Sets the qrcode_image of this Box.


        :param qrcode_image: The qrcode_image of this Box.
        :type qrcode_image: str
        """

        self._qrcode_image = qrcode_image

    @property
    def notes(self) -> str:
        """Gets the notes of this Box.


        :return: The notes of this Box.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Box.


        :param notes: The notes of this Box.
        :type notes: str
        """

        self._notes = notes

    @property
    def photo_urls(self) -> List[str]:
        """Gets the photo_urls of this Box.


        :return: The photo_urls of this Box.
        :rtype: List[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls: List[str]):
        """Sets the photo_urls of this Box.


        :param photo_urls: The photo_urls of this Box.
        :type photo_urls: List[str]
        """

        self._photo_urls = photo_urls

    @property
    def tags(self) -> List[Tag]:
        """Gets the tags of this Box.


        :return: The tags of this Box.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """Sets the tags of this Box.


        :param tags: The tags of this Box.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def status(self) -> BoxStatus:
        """Gets the status of this Box.


        :return: The status of this Box.
        :rtype: BoxStatus
        """
        return self._status

    @status.setter
    def status(self, status: BoxStatus):
        """Sets the status of this Box.


        :param status: The status of this Box.
        :type status: BoxStatus
        """

        self._status = status

    @property
    def active(self) -> bool:
        """Gets the active of this Box.


        :return: The active of this Box.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Box.


        :param active: The active of this Box.
        :type active: bool
        """

        self._active = active

    @property
    def audit_info(self) -> AuditInfo:
        """Gets the audit_info of this Box.


        :return: The audit_info of this Box.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info: AuditInfo):
        """Sets the audit_info of this Box.


        :param audit_info: The audit_info of this Box.
        :type audit_info: AuditInfo
        """

        self._audit_info = audit_info
