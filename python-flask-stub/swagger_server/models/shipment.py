# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.audit_info import AuditInfo  # noqa: F401,E501
from swagger_server.models.location import Location  # noqa: F401,E501
from swagger_server import util


class Shipment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, shipment_id: str=None, startdate: datetime=None, deliverydate: datetime=None, startlocation: Location=None, final_destination: Location=None, active: bool=True, complete: bool=False, shipmentnotes: str=None, deliverynotes: str=None, notes: str=None, audit_info: AuditInfo=None):  # noqa: E501
        """Shipment - a model defined in Swagger

        :param shipment_id: The shipment_id of this Shipment.  # noqa: E501
        :type shipment_id: str
        :param startdate: The startdate of this Shipment.  # noqa: E501
        :type startdate: datetime
        :param deliverydate: The deliverydate of this Shipment.  # noqa: E501
        :type deliverydate: datetime
        :param startlocation: The startlocation of this Shipment.  # noqa: E501
        :type startlocation: Location
        :param final_destination: The final_destination of this Shipment.  # noqa: E501
        :type final_destination: Location
        :param active: The active of this Shipment.  # noqa: E501
        :type active: bool
        :param complete: The complete of this Shipment.  # noqa: E501
        :type complete: bool
        :param shipmentnotes: The shipmentnotes of this Shipment.  # noqa: E501
        :type shipmentnotes: str
        :param deliverynotes: The deliverynotes of this Shipment.  # noqa: E501
        :type deliverynotes: str
        :param notes: The notes of this Shipment.  # noqa: E501
        :type notes: str
        :param audit_info: The audit_info of this Shipment.  # noqa: E501
        :type audit_info: AuditInfo
        """
        self.swagger_types = {
            'shipment_id': str,
            'startdate': datetime,
            'deliverydate': datetime,
            'startlocation': Location,
            'final_destination': Location,
            'active': bool,
            'complete': bool,
            'shipmentnotes': str,
            'deliverynotes': str,
            'notes': str,
            'audit_info': AuditInfo
        }

        self.attribute_map = {
            'shipment_id': 'shipmentId',
            'startdate': 'startdate',
            'deliverydate': 'deliverydate',
            'startlocation': 'startlocation',
            'final_destination': 'finalDestination',
            'active': 'active',
            'complete': 'complete',
            'shipmentnotes': 'shipmentnotes',
            'deliverynotes': 'deliverynotes',
            'notes': 'notes',
            'audit_info': 'auditInfo'
        }
        self._shipment_id = shipment_id
        self._startdate = startdate
        self._deliverydate = deliverydate
        self._startlocation = startlocation
        self._final_destination = final_destination
        self._active = active
        self._complete = complete
        self._shipmentnotes = shipmentnotes
        self._deliverynotes = deliverynotes
        self._notes = notes
        self._audit_info = audit_info

    @classmethod
    def from_dict(cls, dikt) -> 'Shipment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Shipment of this Shipment.  # noqa: E501
        :rtype: Shipment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shipment_id(self) -> str:
        """Gets the shipment_id of this Shipment.


        :return: The shipment_id of this Shipment.
        :rtype: str
        """
        return self._shipment_id

    @shipment_id.setter
    def shipment_id(self, shipment_id: str):
        """Sets the shipment_id of this Shipment.


        :param shipment_id: The shipment_id of this Shipment.
        :type shipment_id: str
        """
        if shipment_id is None:
            raise ValueError("Invalid value for `shipment_id`, must not be `None`")  # noqa: E501

        self._shipment_id = shipment_id

    @property
    def startdate(self) -> datetime:
        """Gets the startdate of this Shipment.


        :return: The startdate of this Shipment.
        :rtype: datetime
        """
        return self._startdate

    @startdate.setter
    def startdate(self, startdate: datetime):
        """Sets the startdate of this Shipment.


        :param startdate: The startdate of this Shipment.
        :type startdate: datetime
        """

        self._startdate = startdate

    @property
    def deliverydate(self) -> datetime:
        """Gets the deliverydate of this Shipment.


        :return: The deliverydate of this Shipment.
        :rtype: datetime
        """
        return self._deliverydate

    @deliverydate.setter
    def deliverydate(self, deliverydate: datetime):
        """Sets the deliverydate of this Shipment.


        :param deliverydate: The deliverydate of this Shipment.
        :type deliverydate: datetime
        """

        self._deliverydate = deliverydate

    @property
    def startlocation(self) -> Location:
        """Gets the startlocation of this Shipment.


        :return: The startlocation of this Shipment.
        :rtype: Location
        """
        return self._startlocation

    @startlocation.setter
    def startlocation(self, startlocation: Location):
        """Sets the startlocation of this Shipment.


        :param startlocation: The startlocation of this Shipment.
        :type startlocation: Location
        """

        self._startlocation = startlocation

    @property
    def final_destination(self) -> Location:
        """Gets the final_destination of this Shipment.


        :return: The final_destination of this Shipment.
        :rtype: Location
        """
        return self._final_destination

    @final_destination.setter
    def final_destination(self, final_destination: Location):
        """Sets the final_destination of this Shipment.


        :param final_destination: The final_destination of this Shipment.
        :type final_destination: Location
        """

        self._final_destination = final_destination

    @property
    def active(self) -> bool:
        """Gets the active of this Shipment.


        :return: The active of this Shipment.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Shipment.


        :param active: The active of this Shipment.
        :type active: bool
        """

        self._active = active

    @property
    def complete(self) -> bool:
        """Gets the complete of this Shipment.


        :return: The complete of this Shipment.
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete: bool):
        """Sets the complete of this Shipment.


        :param complete: The complete of this Shipment.
        :type complete: bool
        """

        self._complete = complete

    @property
    def shipmentnotes(self) -> str:
        """Gets the shipmentnotes of this Shipment.

        notes about the shipment  # noqa: E501

        :return: The shipmentnotes of this Shipment.
        :rtype: str
        """
        return self._shipmentnotes

    @shipmentnotes.setter
    def shipmentnotes(self, shipmentnotes: str):
        """Sets the shipmentnotes of this Shipment.

        notes about the shipment  # noqa: E501

        :param shipmentnotes: The shipmentnotes of this Shipment.
        :type shipmentnotes: str
        """

        self._shipmentnotes = shipmentnotes

    @property
    def deliverynotes(self) -> str:
        """Gets the deliverynotes of this Shipment.

        notes about the delivery  # noqa: E501

        :return: The deliverynotes of this Shipment.
        :rtype: str
        """
        return self._deliverynotes

    @deliverynotes.setter
    def deliverynotes(self, deliverynotes: str):
        """Sets the deliverynotes of this Shipment.

        notes about the delivery  # noqa: E501

        :param deliverynotes: The deliverynotes of this Shipment.
        :type deliverynotes: str
        """

        self._deliverynotes = deliverynotes

    @property
    def notes(self) -> str:
        """Gets the notes of this Shipment.

        Internal notes about shipment  # noqa: E501

        :return: The notes of this Shipment.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this Shipment.

        Internal notes about shipment  # noqa: E501

        :param notes: The notes of this Shipment.
        :type notes: str
        """

        self._notes = notes

    @property
    def audit_info(self) -> AuditInfo:
        """Gets the audit_info of this Shipment.


        :return: The audit_info of this Shipment.
        :rtype: AuditInfo
        """
        return self._audit_info

    @audit_info.setter
    def audit_info(self, audit_info: AuditInfo):
        """Sets the audit_info of this Shipment.


        :param audit_info: The audit_info of this Shipment.
        :type audit_info: AuditInfo
        """

        self._audit_info = audit_info
